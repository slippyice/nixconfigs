{
  description = "slip's NyxOS Flake";

  inputs = {
    # `github:owner/name/reference`,
    # which represents the GitHub repository URL + branch/commit-id/tag.

    #nixpkgs.url = "github:NixOS/nixpkgs/nixos-23.11";
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # Premade hardware modules
    nixos-hardware.url = "github:NixOS/nixos-hardware/master";

#    # home-manager, used for managing user configuration
#    home-manager = {
#      url = "github:nix-community/home-manager/release-23.11";
#      # The `follows` keyword in inputs is used for inheritance.
#      # Here, `inputs.nixpkgs` of home-manager is kept consistent with
#      # the `inputs.nixpkgs` of the current flake,
#      # to avoid problems caused by different versions of nixpkgs.
#      inputs.nixpkgs.follows = "nixpkgs";
#    };
  };

  # The `@` syntax here is used to alias the attribute set of the
  # inputs's parameter, making it convenient to use inside the function.
  outputs = { self, nixpkgs, nixos-hardware, ... }@inputs: {
    nixosConfigurations = {
      # deploy this configuration on any NixOS system:
      #   sudo nixos-rebuild switch --flake .#nixos-test
      "master" = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";

        # The Nix module system can modularize configuration,
        # improving the maintainability of configuration.
        #
        # Each parameter in the `modules` is a Nixpkgs Module, and
        # there is a partial introduction to it in the nixpkgs manual:
        #    <https://nixos.org/manual/nixpkgs/unstable/#module-system-introduction>
        # It is said to be partial because the documentation is not
        # complete, only some simple introductions.
        # such is the current state of Nix documentation...
        #
        # A Nixpkgs Module can be an attribute set, or a function that
        # returns an attribute set. By default, if a Nixpkgs Module is a
        # function, this function have the following default parameters:
        #
        #  lib:     the nixpkgs function library, which provides many
        #             useful functions for operating Nix expressions:
        #             https://nixos.org/manual/nixpkgs/stable/#id-1.4
        #  config:  all config options of the current flake, very useful
        #  options: all options defined in all NixOS Modules
        #             in the current flake
        #  pkgs:   a collection of all packages defined in nixpkgs,
        #            plus a set of functions related to packaging.
        #            you can assume its default value is
        #            `nixpkgs.legacyPackages."${system}"` for now.
        #            can be customed by `nixpkgs.pkgs` option
        #  modulesPath: the default path of nixpkgs's modules folder,
        #               used to import some extra modules from nixpkgs.
        #               this parameter is rarely used,
        #               you can ignore it for now.
        #
        # The default parameters mentioned above are automatically
        # generated by Nixpkgs. 
        # However, if you need to pass other non-default parameters
        # to the submodules, 
        # you'll have to manually configure these parameters using
        # `specialArgs`. 
        # you must use `specialArgs` by uncomment the following line:
        #
        # specialArgs = {...};  # pass custom arguments into all sub module.
        modules = [
          nixos-hardware.nixosModules.framework-16-7040-amd
          ./configuration.nix
          ./unfree.nix
          ./fw16.nix
          #./acer-swift3.nix
          ./mullvad.nix
          #./nodejs.nix
          ./vm.nix
          ./drawing-tablet.nix
          #./printscan.nix
          ./security.nix
          #./overlays.nix
          ./systemd-services.nix
          ./wii.nix
        ];
      };
    };
  };
}
